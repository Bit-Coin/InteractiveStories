apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: api-deployment
  #labels:
  #  app: api-deployment
spec:
  replicas: 1
  # selector defines how we manage to find pods for deployment
  # In our case we simply select pods with label "app: nginx"
  selector:
    matchLabels:
      app: api
  # describe our pods
  template:
    # set up pod with label "app: nginx"
    metadata:
      labels:
        app: api
    # describe the "content" of the pod: what container to run
    # and container settings
    spec:
      containers:
      - name: api
        image: cleverices/interactivestories.api
        ports:
        - containerPort: 80
---
kind: Service
apiVersion: v1
metadata:
  # set service name and label
  # also name will be DNS name of the service
  name: api-service
  #labels:
  #  app: client-service
spec:
  # ClusterIP (default) - stable IP inside the cluster - we cannot connect to service from the outside world
  # NodePort - takes cluster IP and adds a cluster-wide port to expose service to the outside the cluster
  # LoadBalancer - adds abstraction around NodePort to integrate NodePort with cloud load balancer
  type: NodePort
  # Defines how we match pods to service. In our case - map to service pods with label "app: nginx"
  selector:
    app: api
  ports:
  - protocol: TCP
    # expose specified port of the containers, running inside each pod of the service
    # bind to cluster-wide port
    port: 5001
    # manually set pod's port to expose (by default equals "port")
    # For example, suppose you have a set of Pods that each expose port 80.
    # As pods of this service includes nginx, which maps 80 port inside pod, hence we select this port in pod to expose outside
    # through service.
    targetPort: 80
